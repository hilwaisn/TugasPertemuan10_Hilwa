<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAABoAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAAAaAAAAHgAAAB4AAAAeAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEAAADkAAAA4QAA
        AOEAAADhAAAA4QAAAOEAAADhAAAA4QAAAOEAAADhAAAA4QAAAOEAAADjAAAAxwAAABoAAAAAAAAAAAAA
        AAAAAAAAAAAAGgAAAMcAAADjAAAA4QAAAOQAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADhAAAAHgAA
        AAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAAAP8AAAD/AAAA/wAAAH8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAP8AAAD/AAAAfwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIAAAAD/AAAA/wAAAP8AAADwAAAAjwAAAH8AAACAAAAAgAAAAIAAAAB/AAAAjwAA
        APAAAAD/AAAA4QAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA/wAAAP8AAAB/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAP8AAAD/AAAA/wAAAOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA4QAAAP8AAADhAAAAHgAAAAAAAAAAAAAACwAAAGgAAACRAAAA8AAAAP8AAAD/AAAA/wAA
        AH8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA/wAAAP8AAAD/AAAA4QAAAB4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAOEAAAAeAAAAAAAAAAAAAAAaAAAAyAAAAOoAAAD8AAAA/wAA
        AP8AAAD/AAAAfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAD/AAAA/wAAAP8AAADhAAAAHgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA4QAAAB4AAAAAAAAAAAAAAAQAAAAZAAAAOQAA
        AOUAAAD/AAAA/wAAAP8AAAB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAP8AAAD/AAAA/wAA
        AOEAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA4QAAAP8AAADhAAAAHgAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA4QAAAP8AAAD/AAAA/wAAAH8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA/wAA
        AP8AAAD/AAAA4QAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAOEAAAAeAAAAAAAA
        AAAAAAAAAAAAAAAAAB4AAADhAAAA/wAAAP8AAAD/AAAAfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AIAAAAD/AAAA/wAAAP8AAADhAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA4QAA
        AB4AAAAAAAAAAAAAAAAAAAAAAAAAHgAAAOEAAAD/AAAA/wAAAP8AAAB/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAgAAAAP8AAAD/AAAA/wAAAOUAAAA4AAAAHAAAAB4AAAAeAAAAHgAAABwAAAA4AAAA5QAA
        AP8AAADlAAAAOAAAABwAAAAeAAAAHgAAABwAAAA4AAAA5QAAAP8AAAD/AAAA/wAAAH8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACAAAAA/wAAAP8AAAD/AAAA+wAAAOUAAADhAAAA4QAAAOEAAADhAAAA4QAA
        AOUAAAD7AAAA/wAAAPsAAADlAAAA4gAAAOIAAADiAAAA4gAAAOUAAAD8AAAA/wAAAP8AAAD/AAAAfwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAA/QAAAPsAAAD6AAAA+AAAAPgAAAD2AAAA9AAAAPIAAADwAAAA7gAAAOoAAADoAAAA5gAA
        AOcAAAByAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwAAAH0AAAB4AAAAdQAAAG4AAABqAAAAZgAA
        AGIAAABfAAAAWAAAAFQAAABQAAAATAAAAEgAAABDAAAAQAAAADwAAAA6AAAAOAAAADIAAAAvAAAAKwAA
        ACkAAAAnAAAAIgAAAA8AAAAAAAAAAAAAAAAAAAAAAAAABAAAABsAAAAcAAAAFwAAAAMAAAADAAAAFwAA
        ABoAAAAXAAAAAwAAAAMAAAAXAAAAGgAAABcAAAADAAAAAwAAABcAAAAaAAAAFwAAAAMAAAADAAAAGAAA
        ABsAAAAYAAAAAwAAAAMAAAAZAAAAHQAAABoAAAAEAAAAAAAAAAAAAAAaAAAAxwAAAOQAAADHAAAAGQAA
        ABkAAADHAAAA5AAAAMcAAAAZAAAAGQAAAMcAAADkAAAAxwAAABkAAAAZAAAAxwAAAOQAAADHAAAAGQAA
        ABkAAADHAAAA5AAAAMcAAAAZAAAAGQAAAMcAAADkAAAAxwAAABoAAAAAAAAAAAAAABwAAADeAAAA/wAA
        AOIAAAAfAAAAGwAAAN8AAAD/AAAA4gAAAB0AAAAcAAAA4QAAAP8AAADhAAAAHAAAABwAAADhAAAA/wAA
        AOEAAAAcAAAAHQAAAOIAAAD/AAAA3wAAABsAAAAeAAAA4gAAAP8AAADeAAAAHAAAAAAAAAAAAAAABQAA
        AH4AAAD4AAAA+gAAAG4AAAAJAAAApgAAAP8AAADzAAAAQgAAABAAAADPAAAA/wAAAOEAAAAcAAAAHAAA
        AOEAAAD/AAAAzwAAABAAAABCAAAA8wAAAP8AAACmAAAACQAAAG0AAAD5AAAA+AAAAH8AAAAFAAAAAAAA
        AAAAAAAAAAAACAAAAIAAAAD4AAAA6QAAAEcAAAAyAAAA4gAAAP8AAACUAAAABQAAAKkAAAD/AAAA4QAA
        ABwAAAAcAAAA4QAAAP8AAACpAAAABQAAAJQAAAD/AAAA4gAAADEAAABGAAAA6QAAAPkAAACBAAAACQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAJ8AAAD/AAAA1wAAAIYAAADUAAAA/wAAAOUAAACHAAAAxgAA
        AP8AAADwAAAAjQAAAI0AAADwAAAA/wAAAMYAAACIAAAA5gAAAP8AAADUAAAAhgAAANgAAAD/AAAAoAAA
        AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAOwAAAD2AAAA9AAAAOkAAAD8AAAA6gAA
        APgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADpAAAAPQAAAJkAAACZAAAAPgAA
        ANIAAAA+AAAAmQAAAIMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHUAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPQAAACYAAAAywAA
        AMsAAACZAAAA6gAAAJkAAADLAAAAdwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAA
        AHYAAACBAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAA
        AIMAAACBAAAAgQAAAIMAAACBAAAAgwAAAHcAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////4AAeB+AAHgfgAB4H4AAeB+AAHgfgfBgH4HwYB+B8
        GAfgfB4H4HweB+B8HgfgAAAH4AAAB+AAAAfgAAAHgAAAAYAAAAGAAAABgAAAAcAAAAPgAAAH8AAAD/AA
        AA/wAAAP8AAAD/////////////////////8=
</value>
  </data>
</root>